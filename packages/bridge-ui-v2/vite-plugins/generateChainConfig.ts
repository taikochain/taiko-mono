/* eslint-disable no-console */
import { promises as fs } from 'fs';
import path from 'path';
import { Project, SourceFile, VariableDeclarationKind } from 'ts-morph';

import type { ChainConfig, ChainConfigMap, ConfiguredChains } from '../src/libs/chain/types';
import { formatSourceFile } from './utils/formatSourceFile';
import { Logger } from './utils/Logger';

enum LayerType {
  L1 = 'L1',
  L2 = 'L2',
  L3 = 'L3',
}

const currentDir = path.resolve(new URL(import.meta.url).pathname);

// Todo: make paths and names configurable via .env?
const outputPath = path.join(path.join(path.dirname(currentDir)), '../src/generated/chainConfig.ts');

const configuredChainsConfigFile = path.join(path.dirname(currentDir), '../config', 'configuredChains.json');

const pluginName = 'generateChainConfig';
const logger = new Logger(pluginName);

export function generateChainConfig() {
  return {
    name: pluginName,
    async buildStart() {
      logger.info('Plugin initialized.');

      // Path to where you want to save the generated TypeScript file
      const tsFilePath = path.resolve(outputPath);

      const project = new Project();
      const notification = `// Generated by ${pluginName} on ${new Date().toLocaleString()}`;
      const warning = `// WARNING: Do not change this file manually as it will be overwritten`;

      let sourceFile = project.createSourceFile(tsFilePath, `${notification}\n${warning}\n`, { overwrite: true });

      // Create the TypeScript content
      sourceFile = await storeTypes(sourceFile);
      sourceFile = await buildChainConfig(sourceFile);
      await sourceFile.saveSync();

      const formatted = await formatSourceFile(tsFilePath)

      // Write the formatted code back to the file
      await fs.writeFile(tsFilePath, formatted);

      logger.info(`Formatted config file saved to ${tsFilePath}`);
    },
  };
}

async function storeTypes(sourceFile: SourceFile) {
  logger.info(`Storing types...`);

  // ChainConfigMap
  sourceFile.addImportDeclaration({
    namedImports: ['ChainConfigMap',],
    moduleSpecifier: '$libs/chain',
    isTypeOnly: true,
  });

  // LayerType
  sourceFile.addEnum({
    name: 'LayerType',
    isExported: false,
    members: [
      { name: 'L1', value: 'L1' },
      { name: 'L2', value: 'L2' },
      { name: 'L3', value: 'L3' },
    ],
  });

  logger.info('Types stored.');
  return sourceFile;
}

async function buildChainConfig(sourceFile: SourceFile) {
  const chainConfig: ChainConfigMap = {};

  const chainsJsonContent = await fs.readFile(configuredChainsConfigFile, 'utf-8');
  const chains: ConfiguredChains = JSON.parse(chainsJsonContent);

  if (!chains.configuredChains || !Array.isArray(chains.configuredChains)) {
    console.error('configuredChains is not an array. Please check the content of the configuredChainsConfigFile.');
    throw new Error();
  }

  chains.configuredChains.forEach((item: Record<string, ChainConfig>) => {
    for (const [chainIdStr, config] of Object.entries(item)) {
      const chainId = Number(chainIdStr);
      const type = config.type as LayerType;

      // Check for duplicates
      if (Object.prototype.hasOwnProperty.call(chainConfig, chainId)) {
        logger.error(`Duplicate chainId ${chainId} found in configuredChains.json`);
        throw new Error();
      }

      // Validate LayerType
      if (!Object.values(LayerType).includes(config.type)) {
        logger.error(`Invalid LayerType ${config.type} found for chainId ${chainId}`);
        throw new Error();
      }

      chainConfig[chainId] = { ...config, type };
    }
  });

  // Add chainConfig variable to sourceFile
  sourceFile.addVariableStatement({
    declarationKind: VariableDeclarationKind.Const,
    declarations: [
      {
        name: 'chainConfig',
        type: 'ChainConfigMap',
        initializer: _formatObjectToTsLiteral(chainConfig),
      },
    ],
    isExported: true,
  });

  logger.info(`Configured ${Object.keys(chainConfig).length} chains.`);
  return sourceFile;
}


const _formatObjectToTsLiteral = (obj: ChainConfigMap): string => {
  const formatValue = (value: ChainConfig): string => {
    if (typeof value === 'string') {
      if (typeof value === 'string') {
        if (Object.values(LayerType).includes(value as LayerType)) {
          return `LayerType.${value}`; // This line is using LayerType as an enum, but it is now a type
        }
        return `"${value}"`;
      }
      return `"${value}"`;
    }
    if (typeof value === 'number' || typeof value === 'boolean' || value === null) {
      return String(value);
    }
    if (Array.isArray(value)) {
      return `[${value.map(formatValue).join(', ')}]`;
    }
    if (typeof value === 'object') {
      return _formatObjectToTsLiteral(value);
    }
    return 'undefined';
  };

  if (Array.isArray(obj)) {
    return `[${obj.map(formatValue).join(', ')}]`;
  }

  const entries = Object.entries(obj);
  const formattedEntries = entries.map(([key, value]) => `${key}: ${formatValue(value)}`);

  return `{${formattedEntries.join(', ')}}`;
};
