/* eslint-disable no-console */
import { promises as fs } from 'fs';
import path from 'path';
import * as prettier from 'prettier';
import { Project, SourceFile, VariableDeclarationKind } from 'ts-morph';

import { Logger } from "./utils/Logger";

const pluginName = 'generateRelayerConfig';
const logger = new Logger(pluginName);
const currentDir = path.resolve(new URL(import.meta.url).pathname);

// Todo: make paths and names configurable via .env?
const outputPath = path.join(path.join(path.dirname(currentDir)), '../src/generated/relayerConfig.ts');

const configuredRelayerConfigFile = path.join(path.dirname(currentDir), '../config', 'configuredRelayer.json');

type RelayerConfig = {
    "chainIds": number[],
    "url": string,
}

type ConfiguredRelayer = {
    configuredRelayer: RelayerConfig[];
};


export function generateRelayerConfig() {
    return {
        name: pluginName,
        async buildStart() {
            logger.info('Plugin initialized.');
            const project = new Project();

            // Path to where you want to save the generated TypeScript file
            const tsFilePath = path.resolve(outputPath);

            // Notification and warning message
            const timestamp = new Date().toLocaleString();
            const notification = `// Generated by ${pluginName} on ${timestamp}`;
            const warning = `// WARNING: Do not change this file manually as it will be overwritten`;

            // Create the TypeScript content
            let sourceFile = project.createSourceFile(tsFilePath, `${notification}\n${warning}\n`, { overwrite: true });

            // Create the TypeScript content

            sourceFile = await storeTypesAndEnums(sourceFile);
            sourceFile = await buildRelayerConfig(sourceFile);

            // Save the file
            await sourceFile.saveSync();
            logger.info(`Generated config file`);

            const generatedCode = await fs.readFile(tsFilePath, 'utf-8');

            logger.info(`Formatting...`);
            // Format the code using Prettier
            const formattedCode = await prettier.format(generatedCode, { parser: 'typescript' });

            // Write the formatted code back to the file
            await fs.writeFile(tsFilePath, formattedCode);
            logger.info(`Formatted config file saved to ${tsFilePath}`);
        },
    };
}

async function storeTypesAndEnums(sourceFile: SourceFile) {
    logger.info(`Storing types...`);
    // RelayerConfig
    sourceFile.addTypeAlias({
        name: 'RelayerConfig',
        isExported: true,
        type: `{ 
            chainIds: number[];
            url: string;
        }`,
    });
    logger.info('Types stored.');
    return sourceFile
}
async function buildRelayerConfig(sourceFile: SourceFile) {
    logger.info('Building relayer config...');

    const relayerJsonContent = await fs.readFile(configuredRelayerConfigFile, 'utf-8');
    const relayer: ConfiguredRelayer = JSON.parse(relayerJsonContent);

    if (!relayer.configuredRelayer || !Array.isArray(relayer.configuredRelayer)) {
        console.error('configuredRelayer is not an array. Please check the content of the configuredRelayerConfigFile.');
        throw new Error();
    }

    // Create a constant variable for the configuration
    const relayerConfigVariable = {
        declarationKind: VariableDeclarationKind.Const,
        declarations: [
            {
                name: 'configuredRelayer',
                initializer: _formatObjectToTsLiteral(relayer.configuredRelayer),
                type: 'RelayerConfig[]',
            },
        ],
        isExported: true,
    };

    sourceFile.addVariableStatement(relayerConfigVariable);
    logger.info('Relayer config built.');
    return sourceFile;
}

const _formatRelayerConfigToTsLiteral = (config: RelayerConfig): string => {
    return `{chainIds: [${config.chainIds ? config.chainIds.join(', ') : ''}], url: "${config.url}"}`;
};

const _formatObjectToTsLiteral = (relayers: RelayerConfig[]): string => {
    return `[${relayers.map(_formatRelayerConfigToTsLiteral).join(', ')}]`;
};

