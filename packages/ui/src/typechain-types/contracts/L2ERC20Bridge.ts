/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface L2ERC20BridgeInterface extends utils.Interface {
  functions: {
    "burn(uint256,address,string,string,uint8)": FunctionFragment;
    "getL2ContractAddressForToken(address,string,string,uint8)": FunctionFragment;
    "getRelayer()": FunctionFragment;
    "mint(bytes32,address,uint256,address,string,string,uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burn"
      | "getL2ContractAddressForToken"
      | "getRelayer"
      | "mint"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getL2ContractAddressForToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getL2ContractAddressForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRelayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ERC20Burn(address,address,string,string,address,uint8,uint256)": EventFragment;
    "ERC20Deployed(address,string,string,uint8,address)": EventFragment;
    "ERC20Mint(address,address,string,string,address,uint8,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ERC20BurnEventObject {
  _l1ContractAddress: string;
  _l2contractAddress: string;
  _name: string;
  _symbol: string;
  _to: string;
  _decimals: number;
  amount: BigNumber;
}
export type ERC20BurnEvent = TypedEvent<
  [string, string, string, string, string, number, BigNumber],
  ERC20BurnEventObject
>;

export type ERC20BurnEventFilter = TypedEventFilter<ERC20BurnEvent>;

export interface ERC20DeployedEventObject {
  _l1ContractAddress: string;
  _name: string;
  _symbol: string;
  _decimals: number;
  _l2contractAddress: string;
}
export type ERC20DeployedEvent = TypedEvent<
  [string, string, string, number, string],
  ERC20DeployedEventObject
>;

export type ERC20DeployedEventFilter = TypedEventFilter<ERC20DeployedEvent>;

export interface ERC20MintEventObject {
  _l1ContractAddress: string;
  _l2contractAddress: string;
  _name: string;
  _symbol: string;
  _to: string;
  _decimals: number;
  amount: BigNumber;
}
export type ERC20MintEvent = TypedEvent<
  [string, string, string, string, string, number, BigNumber],
  ERC20MintEventObject
>;

export type ERC20MintEventFilter = TypedEventFilter<ERC20MintEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface L2ERC20Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2ERC20BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burn(
      _amount: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getL2ContractAddressForToken(
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRelayer(overrides?: CallOverrides): Promise<[string]>;

    mint(
      l1TxHash: PromiseOrValue<BytesLike>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  burn(
    _amount: PromiseOrValue<BigNumberish>,
    _contractAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getL2ContractAddressForToken(
    _contractAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRelayer(overrides?: CallOverrides): Promise<string>;

  mint(
    l1TxHash: PromiseOrValue<BytesLike>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _contractAddress: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      _amount: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getL2ContractAddressForToken(
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRelayer(overrides?: CallOverrides): Promise<string>;

    mint(
      l1TxHash: PromiseOrValue<BytesLike>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC20Burn(address,address,string,string,address,uint8,uint256)"(
      _l1ContractAddress?: PromiseOrValue<string> | null,
      _l2contractAddress?: PromiseOrValue<string> | null,
      _name?: null,
      _symbol?: null,
      _to?: null,
      _decimals?: null,
      amount?: null
    ): ERC20BurnEventFilter;
    ERC20Burn(
      _l1ContractAddress?: PromiseOrValue<string> | null,
      _l2contractAddress?: PromiseOrValue<string> | null,
      _name?: null,
      _symbol?: null,
      _to?: null,
      _decimals?: null,
      amount?: null
    ): ERC20BurnEventFilter;

    "ERC20Deployed(address,string,string,uint8,address)"(
      _l1ContractAddress?: PromiseOrValue<string> | null,
      _name?: null,
      _symbol?: null,
      _decimals?: null,
      _l2contractAddress?: PromiseOrValue<string> | null
    ): ERC20DeployedEventFilter;
    ERC20Deployed(
      _l1ContractAddress?: PromiseOrValue<string> | null,
      _name?: null,
      _symbol?: null,
      _decimals?: null,
      _l2contractAddress?: PromiseOrValue<string> | null
    ): ERC20DeployedEventFilter;

    "ERC20Mint(address,address,string,string,address,uint8,uint256)"(
      _l1ContractAddress?: PromiseOrValue<string> | null,
      _l2contractAddress?: PromiseOrValue<string> | null,
      _name?: null,
      _symbol?: null,
      _to?: null,
      _decimals?: null,
      amount?: null
    ): ERC20MintEventFilter;
    ERC20Mint(
      _l1ContractAddress?: PromiseOrValue<string> | null,
      _l2contractAddress?: PromiseOrValue<string> | null,
      _name?: null,
      _symbol?: null,
      _to?: null,
      _decimals?: null,
      amount?: null
    ): ERC20MintEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    burn(
      _amount: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getL2ContractAddressForToken(
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      l1TxHash: PromiseOrValue<BytesLike>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      _amount: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getL2ContractAddressForToken(
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      l1TxHash: PromiseOrValue<BytesLike>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
